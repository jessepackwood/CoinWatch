// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MarketCapCard tests should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    coin={
        Object {
            "long": "Bitcoin",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="coin-name"
>
          <span
                    className="number"
          >
                    .
          </span>
          Bitcoin
          <span
                    className="short"
          >
                    (
                    )
          </span>
</h3>,
        <span
          className="price"
>
          <span
                    className="usd"
          >
                    USD
          </span>
          <NumberFormat
                    allowNegative={true}
                    decimalSeparator="."
                    displayType="text"
                    fixedDecimalScale={false}
                    getInputRef={[Function]}
                    isAllowed={[Function]}
                    isNumericString={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onMouseUp={[Function]}
                    onValueChange={[Function]}
                    prefix="$"
                    suffix=""
                    thousandSeparator={true}
                    type="text"
                    value={undefined}
          />
</span>,
        <span
          className="negative dayChange"
>
          %
          <span
                    className="hour"
          >
                    (24H)
          </span>
</span>,
        <span
          className=" btn-fav"
          onClick={[Function]}
/>,
      ],
      "className": "card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="number"
>
              .
</span>,
            "Bitcoin",
            <span
              className="short"
>
              (
              )
</span>,
          ],
          "className": "coin-name",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                ".",
              ],
              "className": "number",
            },
            "ref": null,
            "rendered": Array [
              undefined,
              ".",
            ],
            "type": "span",
          },
          "Bitcoin",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "(",
                undefined,
                ")",
              ],
              "className": "short",
            },
            "ref": null,
            "rendered": Array [
              "(",
              undefined,
              ")",
            ],
            "type": "span",
          },
        ],
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="usd"
>
              USD
</span>,
            <NumberFormat
              allowNegative={true}
              decimalSeparator="."
              displayType="text"
              fixedDecimalScale={false}
              getInputRef={[Function]}
              isAllowed={[Function]}
              isNumericString={false}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onMouseUp={[Function]}
              onValueChange={[Function]}
              prefix="$"
              suffix=""
              thousandSeparator={true}
              type="text"
              value={undefined}
/>,
          ],
          "className": "price",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "USD",
              "className": "usd",
            },
            "ref": null,
            "rendered": "USD",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowNegative": true,
              "decimalSeparator": ".",
              "displayType": "text",
              "fixedDecimalScale": false,
              "getInputRef": [Function],
              "isAllowed": [Function],
              "isNumericString": false,
              "onBlur": [Function],
              "onChange": [Function],
              "onFocus": [Function],
              "onKeyDown": [Function],
              "onMouseUp": [Function],
              "onValueChange": [Function],
              "prefix": "$",
              "suffix": "",
              "thousandSeparator": true,
              "type": "text",
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            "%",
            <span
              className="hour"
>
              (24H)
</span>,
          ],
          "className": "negative dayChange",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          "%",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "(24H)",
              "className": "hour",
            },
            "ref": null,
            "rendered": "(24H)",
            "type": "span",
          },
        ],
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": " btn-fav",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": "span",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="coin-name"
>
            <span
                        className="number"
            >
                        .
            </span>
            Bitcoin
            <span
                        className="short"
            >
                        (
                        )
            </span>
</h3>,
          <span
            className="price"
>
            <span
                        className="usd"
            >
                        USD
            </span>
            <NumberFormat
                        allowNegative={true}
                        decimalSeparator="."
                        displayType="text"
                        fixedDecimalScale={false}
                        getInputRef={[Function]}
                        isAllowed={[Function]}
                        isNumericString={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseUp={[Function]}
                        onValueChange={[Function]}
                        prefix="$"
                        suffix=""
                        thousandSeparator={true}
                        type="text"
                        value={undefined}
            />
</span>,
          <span
            className="negative dayChange"
>
            %
            <span
                        className="hour"
            >
                        (24H)
            </span>
</span>,
          <span
            className=" btn-fav"
            onClick={[Function]}
/>,
        ],
        "className": "card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="number"
>
                .
</span>,
              "Bitcoin",
              <span
                className="short"
>
                (
                )
</span>,
            ],
            "className": "coin-name",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  undefined,
                  ".",
                ],
                "className": "number",
              },
              "ref": null,
              "rendered": Array [
                undefined,
                ".",
              ],
              "type": "span",
            },
            "Bitcoin",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "(",
                  undefined,
                  ")",
                ],
                "className": "short",
              },
              "ref": null,
              "rendered": Array [
                "(",
                undefined,
                ")",
              ],
              "type": "span",
            },
          ],
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="usd"
>
                USD
</span>,
              <NumberFormat
                allowNegative={true}
                decimalSeparator="."
                displayType="text"
                fixedDecimalScale={false}
                getInputRef={[Function]}
                isAllowed={[Function]}
                isNumericString={false}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onMouseUp={[Function]}
                onValueChange={[Function]}
                prefix="$"
                suffix=""
                thousandSeparator={true}
                type="text"
                value={undefined}
/>,
            ],
            "className": "price",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "USD",
                "className": "usd",
              },
              "ref": null,
              "rendered": "USD",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowNegative": true,
                "decimalSeparator": ".",
                "displayType": "text",
                "fixedDecimalScale": false,
                "getInputRef": [Function],
                "isAllowed": [Function],
                "isNumericString": false,
                "onBlur": [Function],
                "onChange": [Function],
                "onFocus": [Function],
                "onKeyDown": [Function],
                "onMouseUp": [Function],
                "onValueChange": [Function],
                "prefix": "$",
                "suffix": "",
                "thousandSeparator": true,
                "type": "text",
                "value": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              "%",
              <span
                className="hour"
>
                (24H)
</span>,
            ],
            "className": "negative dayChange",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            "%",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "(24H)",
                "className": "hour",
              },
              "ref": null,
              "rendered": "(24H)",
              "type": "span",
            },
          ],
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": " btn-fav",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
